 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/sales-coach/index.ts b/client/src/components/sales-coach/index.ts
new file mode 100644
index 0000000000000000000000000000000000000000..216697c387b446e5781fe7c118a5b8d01dfbea8e
--- /dev/null
+++ b/client/src/components/sales-coach/index.ts
@@ -0,0 +1,3 @@
+export { SalesCoachProvider, useSalesCoachContext } from "./sales-coach-provider"
+export { SalesCoachPanel } from "./sales-coach-panel"
+export { SalesCoachLauncher } from "./sales-coach-launcher"
diff --git a/client/src/components/sales-coach/sales-coach-launcher.tsx b/client/src/components/sales-coach/sales-coach-launcher.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..cbbcb86eeff5f965de138073d69e363e848a7051
--- /dev/null
+++ b/client/src/components/sales-coach/sales-coach-launcher.tsx
@@ -0,0 +1,35 @@
+import { Button } from "@/components/ui/button"
+import { useSalesCoachContext } from "./sales-coach-provider"
+import { Headphones } from "lucide-react"
+
+interface SalesCoachLauncherProps {
+  size?: "default" | "sm"
+}
+
+export function SalesCoachLauncher({ size = "default" }: SalesCoachLauncherProps) {
+  const { openPanel, startSession, status, featureEnabled } = useSalesCoachContext()
+
+  const handleClick = async () => {
+    if (!featureEnabled) {
+      return
+    }
+    openPanel()
+    if (status === "idle" || status === "ended" || status === "error") {
+      await startSession()
+    }
+  }
+
+  return (
+    <Button
+      onClick={handleClick}
+      variant="outline"
+      size={size}
+      className="gap-2"
+      data-testid="button-sales-coach"
+      disabled={!featureEnabled}
+    >
+      <Headphones className="h-4 w-4" />
+      Sales Coach
+    </Button>
+  )
+}
diff --git a/client/src/components/sales-coach/sales-coach-panel.tsx b/client/src/components/sales-coach/sales-coach-panel.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..842ecb2e0fff2a27ec513da30896897a0781eeb1
--- /dev/null
+++ b/client/src/components/sales-coach/sales-coach-panel.tsx
@@ -0,0 +1,274 @@
+import { Button } from "@/components/ui/button"
+import { Badge } from "@/components/ui/badge"
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
+import { ScrollArea } from "@/components/ui/scroll-area"
+import { Sheet, SheetContent, SheetHeader, SheetTitle } from "@/components/ui/sheet"
+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
+import { cn } from "@/lib/utils"
+import {
+  Bot,
+  Headphones,
+  Loader2,
+  MicOff,
+  PauseCircle,
+  PlayCircle,
+  Sparkles,
+  X
+} from "lucide-react"
+import { useMemo } from "react"
+import { useSalesCoachContext } from "./sales-coach-provider"
+
+export function SalesCoachPanel() {
+  const {
+    open,
+    closePanel,
+    status,
+    startSession,
+    stopSession,
+    transcript,
+    suggestions,
+    objections,
+    knowledge,
+    featureEnabled
+  } = useSalesCoachContext()
+
+  const isActive = status === "listening"
+  const isConnecting = status === "connecting"
+
+  const statusLabel = useMemo(() => {
+    if (!featureEnabled) {
+      return "Feature disabled"
+    }
+    switch (status) {
+      case "idle":
+        return "Coach idle"
+      case "connecting":
+        return "Connecting to coach"
+      case "listening":
+        return "Coach is live"
+      case "error":
+        return "Coach error"
+      case "ended":
+        return "Session ended"
+      default:
+        return "Coach"
+    }
+  }, [featureEnabled, status])
+
+  return (
+    <Sheet open={open} onOpenChange={(value) => (!value ? closePanel() : null)}>
+      <SheetContent side="right" className="w-full sm:max-w-xl p-0">
+        <SheetHeader className="border-b px-6 py-4 flex flex-row items-center justify-between space-y-0">
+          <div className="flex items-center space-x-3">
+            <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center text-primary">
+              <Headphones className="h-5 w-5" />
+            </div>
+            <div>
+              <SheetTitle className="text-lg font-semibold">Sales Coach</SheetTitle>
+              <p className="text-sm text-muted-foreground">{statusLabel}</p>
+            </div>
+          </div>
+          <div className="flex items-center space-x-2">
+            {isActive ? (
+              <Button variant="secondary" size="sm" onClick={stopSession} className="gap-2">
+                <PauseCircle className="h-4 w-4" />
+                Stop
+              </Button>
+            ) : (
+              <Button
+                variant="default"
+                size="sm"
+                onClick={startSession}
+                className="gap-2"
+                disabled={!featureEnabled || isConnecting}
+              >
+                {isConnecting ? (
+                  <Loader2 className="h-4 w-4 animate-spin" />
+                ) : (
+                  <PlayCircle className="h-4 w-4" />
+                )}
+                {featureEnabled ? (isConnecting ? "Connecting" : "Start") : "Unavailable"}
+              </Button>
+            )}
+            <Button variant="ghost" size="icon" onClick={closePanel} aria-label="Close coach">
+              <X className="h-4 w-4" />
+            </Button>
+          </div>
+        </SheetHeader>
+
+        <div className="grid grid-rows-[auto_auto_1fr] h-full">
+          <div className="px-6 py-3 border-b bg-muted/40">
+            <TooltipProvider>
+              <div className="flex items-center space-x-3">
+                <Tooltip>
+                  <TooltipTrigger asChild>
+                    <Badge
+                      variant={!featureEnabled || status === "error" ? "destructive" : "outline"}
+                      className="gap-1"
+                    >
+                      {status === "connecting" && featureEnabled && <Loader2 className="h-3 w-3 animate-spin" />}
+                      {status === "listening" && featureEnabled && <Sparkles className="h-3 w-3" />}
+                      {status === "idle" && featureEnabled && <Bot className="h-3 w-3" />}
+                      {status === "error" && <MicOff className="h-3 w-3" />}
+                      {!featureEnabled && <MicOff className="h-3 w-3" />}
+                      {statusLabel}
+                    </Badge>
+                  </TooltipTrigger>
+                  <TooltipContent>
+                    {featureEnabled ? (
+                      <p>
+                        The coach records audio from the current tab only. Switch tabs to pause insights automatically when
+                        capture stops.
+                      </p>
+                    ) : (
+                      <p>Sales Coach has not been enabled for this workspace. Reach out to your admin to activate it.</p>
+                    )}
+                  </TooltipContent>
+                </Tooltip>
+              </div>
+            </TooltipProvider>
+          </div>
+
+          <ScrollArea className="px-6 py-4 space-y-4">
+            <section>
+              <h3 className="text-sm font-semibold text-muted-foreground mb-2">Live Transcript</h3>
+              <div className="space-y-2">
+                {transcript.length === 0 && (
+                  <p className="text-sm text-muted-foreground">
+                    {!featureEnabled
+                      ? "Enable the Sales Coach feature to stream live transcripts."
+                      : status === "listening"
+                      ? "The coach is listening. Transcript will appear momentarily."
+                      : "Start the coach to begin capturing the live transcript."}
+                  </p>
+                )}
+                {transcript.map((segment) => (
+                  <div key={segment.id} className="text-sm">
+                    <span
+                      className={cn("font-medium", {
+                        "text-primary": segment.speaker === "rep",
+                        "text-emerald-500": segment.speaker === "prospect",
+                        "text-muted-foreground": segment.speaker === "system"
+                      })}
+                    >
+                      {segment.speaker === "rep"
+                        ? "You"
+                        : segment.speaker === "prospect"
+                        ? "Customer"
+                        : "Coach"}
+                    </span>
+                    : <span className="ml-1 text-muted-foreground">{segment.text}</span>
+                  </div>
+                ))}
+              </div>
+            </section>
+
+            <section>
+              <div className="flex items-center justify-between mb-2">
+                <h3 className="text-sm font-semibold text-muted-foreground">Live Suggestions</h3>
+                <Badge variant="secondary">{suggestions.length}</Badge>
+              </div>
+              <div className="space-y-3">
+                {suggestions.length === 0 && (
+                  <Card className="bg-muted/40 border-dashed">
+                    <CardContent className="py-6 text-center text-sm text-muted-foreground">
+                      Suggestions from the coach will appear here.
+                    </CardContent>
+                  </Card>
+                )}
+                {suggestions.map((suggestion) => (
+                  <Card key={suggestion.id}>
+                    <CardHeader className="pb-2 flex flex-row items-start justify-between space-y-0">
+                      <div>
+                        <CardTitle className="text-sm font-semibold">{suggestion.title}</CardTitle>
+                        <p className="text-xs text-muted-foreground">{new Date(suggestion.createdAt).toLocaleTimeString()}</p>
+                      </div>
+                      <Badge
+                        variant={
+                          suggestion.priority === "high"
+                            ? "destructive"
+                            : suggestion.priority === "medium"
+                            ? "default"
+                            : "secondary"
+                        }
+                      >
+                        {suggestion.priority}
+                      </Badge>
+                    </CardHeader>
+                    <CardContent className="pt-0 text-sm text-muted-foreground whitespace-pre-line">
+                      {suggestion.body}
+                    </CardContent>
+                  </Card>
+                ))}
+              </div>
+            </section>
+
+            <section>
+              <div className="flex items-center justify-between mb-2">
+                <h3 className="text-sm font-semibold text-muted-foreground">Objection Handling</h3>
+                <Badge variant="secondary">{objections.length}</Badge>
+              </div>
+              <div className="space-y-3">
+                {objections.length === 0 && (
+                  <Card className="bg-muted/40 border-dashed">
+                    <CardContent className="py-6 text-center text-sm text-muted-foreground">
+                      The coach will surface objection handling tips during the call.
+                    </CardContent>
+                  </Card>
+                )}
+                {objections.map((objection) => (
+                  <Card key={objection.id}>
+                    <CardHeader className="pb-2">
+                      <CardTitle className="text-sm font-semibold">Customer said</CardTitle>
+                      <p className="text-sm text-foreground">“{objection.customerQuote}”</p>
+                    </CardHeader>
+                    <CardContent className="pt-0">
+                      <p className="text-xs uppercase tracking-wide text-muted-foreground mb-2">Recommended response</p>
+                      <p className="text-sm text-muted-foreground whitespace-pre-line">{objection.recommendedResponse}</p>
+                    </CardContent>
+                  </Card>
+                ))}
+              </div>
+            </section>
+
+            <section>
+              <div className="flex items-center justify-between mb-2">
+                <h3 className="text-sm font-semibold text-muted-foreground">Knowledge Boosters</h3>
+                <Badge variant="secondary">{knowledge.length}</Badge>
+              </div>
+              <div className="space-y-3">
+                {knowledge.length === 0 && (
+                  <Card className="bg-muted/40 border-dashed">
+                    <CardContent className="py-6 text-center text-sm text-muted-foreground">
+                      When the coach references MCP data, cards will appear here with quick answers and links.
+                    </CardContent>
+                  </Card>
+                )}
+                {knowledge.map((card) => (
+                  <Card key={card.id}>
+                    <CardHeader className="pb-2">
+                      <CardTitle className="text-sm font-semibold">{card.heading}</CardTitle>
+                    </CardHeader>
+                    <CardContent className="pt-0 text-sm text-muted-foreground space-y-2">
+                      <p>{card.summary}</p>
+                      {card.link && (
+                        <a
+                          href={card.link}
+                          target="_blank"
+                          rel="noreferrer"
+                          className="text-xs text-primary hover:underline"
+                        >
+                          View details
+                        </a>
+                      )}
+                    </CardContent>
+                  </Card>
+                ))}
+              </div>
+            </section>
+          </ScrollArea>
+        </div>
+      </SheetContent>
+    </Sheet>
+  )
+}
diff --git a/client/src/components/sales-coach/sales-coach-provider.tsx b/client/src/components/sales-coach/sales-coach-provider.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..4fa246c4d8f32b30a89f22a8ec9bc1b980b34b36
--- /dev/null
+++ b/client/src/components/sales-coach/sales-coach-provider.tsx
@@ -0,0 +1,381 @@
+import React, { createContext, useCallback, useContext, useMemo, useReducer } from "react"
+import { useToast } from "@/hooks/use-toast"
+import { createAudioStream } from "@/lib/sales-coach/audio-stream"
+import type { LiveCoachSocketEvent, LiveCoachOutgoingMessage } from "@/lib/sales-coach/events"
+
+interface TranscriptSegment {
+  id: string
+  text: string
+  speaker: "rep" | "prospect" | "system"
+  timestamp: string
+}
+
+interface SuggestionInsight {
+  id: string
+  title: string
+  body: string
+  priority: "high" | "medium" | "low"
+  createdAt: string
+}
+
+interface ObjectionInsight {
+  id: string
+  customerQuote: string
+  recommendedResponse: string
+  createdAt: string
+}
+
+interface KnowledgeCard {
+  id: string
+  heading: string
+  summary: string
+  link?: string
+  createdAt: string
+}
+
+export interface SalesCoachState {
+  status: "idle" | "connecting" | "listening" | "error" | "ended"
+  sessionId?: string
+  transcript: TranscriptSegment[]
+  suggestions: SuggestionInsight[]
+  objections: ObjectionInsight[]
+  knowledge: KnowledgeCard[]
+  error?: string
+}
+
+const initialState: SalesCoachState = {
+  status: "idle",
+  transcript: [],
+  suggestions: [],
+  objections: [],
+  knowledge: []
+}
+
+const generateSegmentId = () => {
+  if (typeof crypto !== "undefined" && "randomUUID" in crypto) {
+    return crypto.randomUUID()
+  }
+  return `${Date.now()}-${Math.random().toString(16).slice(2)}`
+}
+
+type Action =
+  | { type: "session.connecting" }
+  | { type: "session.started"; sessionId: string }
+  | { type: "session.ended" }
+  | { type: "session.error"; error: string }
+  | { type: "transcript.append"; segment: TranscriptSegment }
+  | { type: "suggestion.upsert"; insight: SuggestionInsight }
+  | { type: "objection.upsert"; insight: ObjectionInsight }
+  | { type: "knowledge.upsert"; card: KnowledgeCard }
+
+function reducer(state: SalesCoachState, action: Action): SalesCoachState {
+  switch (action.type) {
+    case "session.connecting":
+      return {
+        ...state,
+        status: "connecting",
+        error: undefined,
+        transcript: [],
+        suggestions: [],
+        objections: [],
+        knowledge: []
+      }
+    case "session.started":
+      return {
+        ...state,
+        status: "listening",
+        sessionId: action.sessionId
+      }
+    case "session.ended":
+      return {
+        ...state,
+        status: "ended"
+      }
+    case "session.error":
+      return {
+        ...state,
+        status: "error",
+        error: action.error
+      }
+    case "transcript.append":
+      return {
+        ...state,
+        transcript: [...state.transcript, action.segment]
+      }
+    case "suggestion.upsert": {
+      const existingIndex = state.suggestions.findIndex((item) => item.id === action.insight.id)
+      if (existingIndex !== -1) {
+        const updated = [...state.suggestions]
+        updated[existingIndex] = action.insight
+        return { ...state, suggestions: updated }
+      }
+      return {
+        ...state,
+        suggestions: [action.insight, ...state.suggestions]
+      }
+    }
+    case "objection.upsert": {
+      const existingIndex = state.objections.findIndex((item) => item.id === action.insight.id)
+      if (existingIndex !== -1) {
+        const updated = [...state.objections]
+        updated[existingIndex] = action.insight
+        return { ...state, objections: updated }
+      }
+      return {
+        ...state,
+        objections: [action.insight, ...state.objections]
+      }
+    }
+    case "knowledge.upsert": {
+      const existingIndex = state.knowledge.findIndex((item) => item.id === action.card.id)
+      if (existingIndex !== -1) {
+        const updated = [...state.knowledge]
+        updated[existingIndex] = action.card
+        return { ...state, knowledge: updated }
+      }
+      return {
+        ...state,
+        knowledge: [action.card, ...state.knowledge]
+      }
+    }
+    default:
+      return state
+  }
+}
+
+interface SalesCoachContextValue extends SalesCoachState {
+  open: boolean
+  openPanel: () => void
+  closePanel: () => void
+  startSession: () => Promise<void>
+  stopSession: () => void
+  featureEnabled: boolean
+}
+
+const SalesCoachContext = createContext<SalesCoachContextValue | undefined>(undefined)
+
+interface SalesCoachProviderProps {
+  children: React.ReactNode
+  callId: string
+  calendarEventId: string
+  accountId?: string
+  featureEnabled?: boolean
+}
+
+export function SalesCoachProvider({
+  children,
+  callId,
+  calendarEventId,
+  accountId,
+  featureEnabled = true
+}: SalesCoachProviderProps) {
+  const [state, dispatch] = useReducer(reducer, initialState)
+  const [open, setOpen] = React.useState(false)
+  const audioRef = React.useRef<ReturnType<typeof createAudioStream> | null>(null)
+  const socketRef = React.useRef<WebSocket | null>(null)
+  const { toast } = useToast()
+
+  const closePanel = useCallback(() => setOpen(false), [])
+  const openPanel = useCallback(() => setOpen(true), [])
+
+  const teardown = useCallback(() => {
+    audioRef.current?.stop()
+    audioRef.current = null
+    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
+      socketRef.current.close(1000, "session closed")
+    }
+    socketRef.current = null
+  }, [])
+
+  const handleSocketEvent = useCallback(
+    (event: LiveCoachSocketEvent) => {
+      switch (event.type) {
+        case "session.created":
+          dispatch({ type: "session.started", sessionId: event.sessionId })
+          break
+        case "session.ended":
+          dispatch({ type: "session.ended" })
+          teardown()
+          break
+        case "session.error":
+          dispatch({ type: "session.error", error: event.error })
+          toast({
+            variant: "destructive",
+            title: "Sales Coach error",
+            description: event.error
+          })
+          teardown()
+          break
+        case "transcript.delta":
+          dispatch({
+            type: "transcript.append",
+            segment: {
+              id: generateSegmentId(),
+              text: event.text,
+              speaker: event.speaker,
+              timestamp: event.timestamp
+            }
+          })
+          break
+        case "insight.suggestion":
+          dispatch({
+            type: "suggestion.upsert",
+            insight: {
+              id: event.insightId,
+              title: event.title,
+              body: event.body,
+              priority: event.priority,
+              createdAt: event.createdAt
+            }
+          })
+          break
+        case "insight.objection":
+          dispatch({
+            type: "objection.upsert",
+            insight: {
+              id: event.objectionId,
+              customerQuote: event.customerQuote,
+              recommendedResponse: event.recommendedResponse,
+              createdAt: event.createdAt
+            }
+          })
+          break
+        case "insight.knowledge":
+          dispatch({
+            type: "knowledge.upsert",
+            card: {
+              id: event.cardId,
+              heading: event.heading,
+              summary: event.summary,
+              link: event.link,
+              createdAt: event.createdAt
+            }
+          })
+          break
+        default:
+          break
+      }
+    },
+    [teardown, toast]
+  )
+
+  const startSession = useCallback(async () => {
+    if (!featureEnabled) {
+      toast({
+        title: "Sales Coach unavailable",
+        description: "This feature has not been enabled for your workspace yet.",
+        variant: "destructive"
+      })
+      return
+    }
+
+    dispatch({ type: "session.connecting" })
+    setOpen(true)
+
+    try {
+      if (typeof window === "undefined") {
+        throw new Error("Sales Coach requires a browser environment")
+      }
+
+      const socket = new WebSocket(`${window.location.origin.replace("http", "ws")}/api/coach/live`)
+      socketRef.current = socket
+
+      socket.addEventListener("open", () => {
+        const payload: LiveCoachOutgoingMessage = {
+          type: "session.start",
+          callId,
+          calendarEventId,
+          accountId
+        }
+        socket.send(JSON.stringify(payload))
+      })
+
+      socket.addEventListener("message", (message) => {
+        try {
+          const parsed = JSON.parse(message.data) as LiveCoachSocketEvent
+          handleSocketEvent(parsed)
+        } catch (error) {
+          console.error("Failed to parse Sales Coach message", error)
+        }
+      })
+
+      socket.addEventListener("close", () => {
+        audioRef.current?.stop()
+        audioRef.current = null
+        socketRef.current = null
+        dispatch({ type: "session.ended" })
+      })
+
+      socket.addEventListener("error", () => {
+        dispatch({ type: "session.error", error: "Sales Coach connection error" })
+        toast({
+          title: "Connection issue",
+          description: "We could not connect to the Sales Coach service.",
+          variant: "destructive"
+        })
+      })
+
+      audioRef.current = createAudioStream({
+        onChunk: (chunk) => {
+          if (socket.readyState === WebSocket.OPEN) {
+            socket.send(chunk)
+          }
+        },
+        onError: (error) => {
+          dispatch({ type: "session.error", error: error.message })
+          toast({
+            title: "Audio capture error",
+            description: error.message,
+            variant: "destructive"
+          })
+        }
+      })
+
+      await audioRef.current.start()
+    } catch (error) {
+      const message = error instanceof Error ? error.message : "Failed to start Sales Coach"
+      dispatch({ type: "session.error", error: message })
+      toast({
+        title: "Unable to start Sales Coach",
+        description: message,
+        variant: "destructive"
+      })
+      teardown()
+    }
+  }, [accountId, calendarEventId, callId, featureEnabled, handleSocketEvent, teardown, toast])
+
+  const stopSession = useCallback(() => {
+    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN && state.sessionId) {
+      const payload: LiveCoachOutgoingMessage = {
+        type: "session.stop",
+        sessionId: state.sessionId
+      }
+      socketRef.current.send(JSON.stringify(payload))
+    }
+    teardown()
+    dispatch({ type: "session.ended" })
+  }, [state.sessionId, teardown])
+
+  const value = useMemo<SalesCoachContextValue>(
+    () => ({
+      ...state,
+      open,
+      openPanel,
+      closePanel,
+      startSession,
+      stopSession,
+      featureEnabled
+    }),
+    [closePanel, featureEnabled, open, openPanel, startSession, state, stopSession]
+  )
+
+  return <SalesCoachContext.Provider value={value}>{children}</SalesCoachContext.Provider>
+}
+
+export function useSalesCoachContext() {
+  const context = useContext(SalesCoachContext)
+  if (!context) {
+    throw new Error("useSalesCoachContext must be used within SalesCoachProvider")
+  }
+  return context
+}
diff --git a/client/src/lib/sales-coach/audio-stream.ts b/client/src/lib/sales-coach/audio-stream.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2d790d9be8e5812498b51b35e9f340643c446cf4
--- /dev/null
+++ b/client/src/lib/sales-coach/audio-stream.ts
@@ -0,0 +1,98 @@
+export interface AudioStreamHandle {
+  start: () => Promise<void>
+  stop: () => void
+  readonly isRecording: boolean
+}
+
+export interface AudioStreamCallbacks {
+  onChunk: (chunk: Blob) => void
+  onStopped?: () => void
+  onError?: (error: Error) => void
+}
+
+export interface CreateAudioStreamOptions {
+  mimeType?: string
+  timeSliceMs?: number
+}
+
+const DEFAULT_MIME_TYPE = "audio/webm"
+const DEFAULT_TIMESLICE = 1000
+
+export function createAudioStream(
+  callbacks: AudioStreamCallbacks,
+  options: CreateAudioStreamOptions = {}
+): AudioStreamHandle {
+  let recorder: MediaRecorder | null = null
+  let activeStream: MediaStream | null = null
+  let recording = false
+
+  const mimeType = options.mimeType ?? DEFAULT_MIME_TYPE
+  const timeSlice = options.timeSliceMs ?? DEFAULT_TIMESLICE
+
+  async function start() {
+    if (recording) {
+      return
+    }
+
+    if (typeof window === "undefined" || typeof navigator === "undefined") {
+      throw new Error("Audio capture is only available in the browser")
+    }
+
+    try {
+      activeStream = await navigator.mediaDevices.getDisplayMedia({
+        video: false,
+        audio: {
+          echoCancellation: false,
+          noiseSuppression: false,
+          sampleRate: 48000
+        }
+      })
+
+      recorder = new MediaRecorder(activeStream, { mimeType })
+      recorder.addEventListener("dataavailable", (event) => {
+        if (event.data.size > 0) {
+          callbacks.onChunk(event.data)
+        }
+      })
+
+      recorder.addEventListener("stop", () => {
+        activeStream?.getTracks().forEach((track) => track.stop())
+        activeStream = null
+        recording = false
+        callbacks.onStopped?.()
+      })
+
+      recorder.addEventListener("error", (event) => {
+        const mediaError = (event as { error?: DOMException }).error
+        const error = mediaError ?? new Error("Unknown MediaRecorder error")
+        callbacks.onError?.(error)
+      })
+
+      recorder.start(timeSlice)
+      recording = true
+    } catch (error) {
+      if (error instanceof Error) {
+        callbacks.onError?.(error)
+        throw error
+      }
+      const wrapped = new Error("Unable to start audio capture")
+      callbacks.onError?.(wrapped)
+      throw wrapped
+    }
+  }
+
+  function stop() {
+    if (!recorder || recorder.state === "inactive") {
+      return
+    }
+    recorder.stop()
+  }
+
+  return {
+    start,
+    stop,
+    get isRecording() {
+      return recording
+    }
+  }
+}
diff --git a/client/src/lib/sales-coach/events.ts b/client/src/lib/sales-coach/events.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f5b87993a1a85ae08e2648c7dedea9a6703bfddb
--- /dev/null
+++ b/client/src/lib/sales-coach/events.ts
@@ -0,0 +1,65 @@
+export type LiveCoachSocketEvent =
+  | {
+      type: "session.created"
+      sessionId: string
+      callId: string
+      startedAt: string
+    }
+  | {
+      type: "session.ended"
+      sessionId: string
+      endedAt: string
+    }
+  | {
+      type: "session.error"
+      sessionId?: string
+      error: string
+      retryable: boolean
+    }
+  | {
+      type: "transcript.delta"
+      sessionId: string
+      text: string
+      speaker: "rep" | "prospect" | "system"
+      timestamp: string
+    }
+  | {
+      type: "insight.suggestion"
+      sessionId: string
+      insightId: string
+      title: string
+      body: string
+      priority: "high" | "medium" | "low"
+      createdAt: string
+    }
+  | {
+      type: "insight.objection"
+      sessionId: string
+      objectionId: string
+      customerQuote: string
+      recommendedResponse: string
+      createdAt: string
+    }
+  | {
+      type: "insight.knowledge"
+      sessionId: string
+      cardId: string
+      heading: string
+      summary: string
+      link?: string
+      createdAt: string
+    }
+
+export interface LiveCoachCommandStart {
+  type: "session.start"
+  callId: string
+  calendarEventId: string
+  accountId?: string
+}
+
+export interface LiveCoachCommandStop {
+  type: "session.stop"
+  sessionId: string
+}
+
+export type LiveCoachOutgoingMessage = LiveCoachCommandStart | LiveCoachCommandStop
diff --git a/client/src/pages/call-prep.tsx b/client/src/pages/call-prep.tsx
index 1a258e6305849646c20d43dc9cd38b2d225fe91c..ebf553e3d336527e27ee2c6f28b15f0634dbb8c9 100644
--- a/client/src/pages/call-prep.tsx
+++ b/client/src/pages/call-prep.tsx
@@ -1,44 +1,45 @@
 import { useQuery, useMutation } from "@tanstack/react-query";
 import { useEffect, useState, useCallback } from "react";
 import { useRoute, useLocation } from "wouter";
 import { Button } from "@/components/ui/button";
 import { Card, CardContent } from "@/components/ui/card";
 import { Badge } from "@/components/ui/badge";
 import { Skeleton } from "@/components/ui/skeleton";
 import { Textarea } from "@/components/ui/textarea";
 import { Alert, AlertDescription } from "@/components/ui/alert";
 import { Sparkles, Calendar, Building2, Clock, FileText, Users, AlertTriangle } from "lucide-react";
 import { apiRequest, queryClient } from "@/lib/queryClient";
 import { useToast } from "@/hooks/use-toast";
 import Navigation from "@/components/ui/navigation";
 import ExecutiveSummary from "@/components/call-prep/executive-summary";
 import CrmHistory from "@/components/call-prep/crm-history";
 import CompetitiveLandscape from "@/components/call-prep/competitive-landscape";
 import KeyStakeholders from "@/components/call-prep/key-stakeholders";
 import RecentNews from "@/components/call-prep/recent-news";
 import SuggestedOpportunities from "@/components/call-prep/suggested-opportunities";
+import { SalesCoachLauncher, SalesCoachPanel, SalesCoachProvider } from "@/components/sales-coach";
 
 interface CallDetails {
   call: {
     id: string;
     title: string;
     scheduledAt: string;
     status: string;
     callType?: string;
     stage?: string;
   };
   company: {
     id: string;
     name: string;
     domain?: string;
     industry?: string;
     size?: string;
     description?: string;
     recentNews?: string[];
   } | null;
   contacts: Array<{
     id: string;
     email: string;
     firstName?: string;
     lastName?: string;
     title?: string;
@@ -335,108 +336,119 @@ export default function CallPrep() {
                   <Skeleton key={i} className="h-32 w-full" />
                 ))}
               </div>
             </div>
           </div>
         </div>
       </div>
     );
   }
 
   if (combinedError || !callDetails) {
     return (
       <div className="min-h-screen bg-background">
         <Navigation />
         <div className="p-6">
           <div className="max-w-6xl mx-auto text-center">
             <h1 className="text-2xl font-bold text-foreground mb-4">Call Not Found</h1>
             <p className="text-muted-foreground">The requested call could not be found or an error occurred.</p>
           </div>
         </div>
       </div>
     );
   }
 
   const { call, company, contacts, callPrep } = callDetails;
+  const salesCoachCalendarEventId =
+    ensuredCalendarCall?.calendarEvent?.id ?? calendarEventId ?? call.id;
+  const salesCoachAccountId = company?.id;
+  const salesCoachFeatureEnabled = import.meta.env.VITE_FEATURE_SALES_COACH !== "false";
 
   return (
-    <div className="min-h-screen bg-background">
-      <Navigation />
-      
-      <div className="p-6">
-        <div className="max-w-6xl mx-auto">
-          {/* Header */}
-          <div className="mb-8">
-            <div className="flex items-start justify-between">
-              <div>
-                <h1 className="text-3xl font-bold text-foreground mb-2" data-testid={`text-call-title-${call.id}`}>
-                  {call.title}
-                </h1>
-                <div className="flex items-center space-x-4 text-muted-foreground">
-                  <div className="flex items-center space-x-2">
-                    <Calendar className="h-4 w-4" />
-                    <span data-testid={`text-call-date-${call.id}`}>{formatDate(call.scheduledAt)}</span>
-                  </div>
-                  {company && (
+    <SalesCoachProvider
+      callId={call.id}
+      calendarEventId={salesCoachCalendarEventId}
+      accountId={salesCoachAccountId}
+      featureEnabled={salesCoachFeatureEnabled}
+    >
+      <div className="min-h-screen bg-background">
+        <Navigation />
+
+        <div className="p-6">
+          <div className="max-w-6xl mx-auto">
+            {/* Header */}
+            <div className="mb-8">
+              <div className="flex items-start justify-between">
+                <div>
+                  <h1 className="text-3xl font-bold text-foreground mb-2" data-testid={`text-call-title-${call.id}`}>
+                    {call.title}
+                  </h1>
+                  <div className="flex items-center space-x-4 text-muted-foreground">
                     <div className="flex items-center space-x-2">
-                      <Building2 className="h-4 w-4" />
-                      <span data-testid={`text-company-name-${call.id}`}>{company.name}</span>
+                      <Calendar className="h-4 w-4" />
+                      <span data-testid={`text-call-date-${call.id}`}>{formatDate(call.scheduledAt)}</span>
                     </div>
+                    {company && (
+                      <div className="flex items-center space-x-2">
+                        <Building2 className="h-4 w-4" />
+                        <span data-testid={`text-company-name-${call.id}`}>{company.name}</span>
+                      </div>
+                    )}
+                    <Badge variant="secondary" data-testid={`badge-call-status-${call.id}`}>
+                      {call.status}
+                    </Badge>
+                  </div>
+                </div>
+
+                <div className="flex items-center space-x-3">
+                  <SalesCoachLauncher size="sm" />
+                  {!callPrep?.isGenerated && (
+                    <Button
+                      onClick={() => resolvedCallId && generatePrepMutation.mutate(resolvedCallId)}
+                      disabled={generatePrepMutation.isPending || !resolvedCallId}
+                      className="flex items-center space-x-2"
+                      data-testid="button-generate-prep"
+                    >
+                      <Sparkles className="h-4 w-4" />
+                      <span>{generatePrepMutation.isPending ? "Generating..." : "Generate AI Prep"}</span>
+                    </Button>
+                  )}
+                  {callPrep?.isGenerated && (
+                    <Button
+                      onClick={() => resolvedCallId && generatePrepMutation.mutate(resolvedCallId)}
+                      disabled={generatePrepMutation.isPending || !resolvedCallId}
+                      variant="outline"
+                      className="flex items-center space-x-2"
+                      data-testid="button-regenerate-prep"
+                    >
+                      <Sparkles className="h-4 w-4" />
+                      <span>{generatePrepMutation.isPending ? "Regenerating..." : "Regenerate Prep"}</span>
+                    </Button>
                   )}
-                  <Badge variant="secondary" data-testid={`badge-call-status-${call.id}`}>
-                    {call.status}
-                  </Badge>
                 </div>
               </div>
-              
-              <div className="flex items-center space-x-3">
-                {!callPrep?.isGenerated && (
-                  <Button
-                    onClick={() => resolvedCallId && generatePrepMutation.mutate(resolvedCallId)}
-                    disabled={generatePrepMutation.isPending || !resolvedCallId}
-                    className="flex items-center space-x-2"
-                    data-testid="button-generate-prep"
-                  >
-                    <Sparkles className="h-4 w-4" />
-                    <span>{generatePrepMutation.isPending ? "Generating..." : "Generate AI Prep"}</span>
-                  </Button>
-                )}
-                {callPrep?.isGenerated && (
-                  <Button
-                    onClick={() => resolvedCallId && generatePrepMutation.mutate(resolvedCallId)}
-                    disabled={generatePrepMutation.isPending || !resolvedCallId}
-                    variant="outline"
-                    className="flex items-center space-x-2"
-                    data-testid="button-regenerate-prep"
-                  >
-                    <Sparkles className="h-4 w-4" />
-                    <span>{generatePrepMutation.isPending ? "Regenerating..." : "Regenerate Prep"}</span>
-                  </Button>
-                )}
-              </div>
             </div>
-          </div>
 
           {/* Partial Prep Mode */}
           {partialPrepData && (
             <>
               {/* Banner Alert */}
               <Alert className="mb-6">
                 <AlertTriangle className="h-4 w-4" />
                 <AlertDescription>{partialPrepData.sheet.banner}</AlertDescription>
               </Alert>
 
               {/* Account Candidates */}
               {partialPrepData.candidates.length > 0 && (
                 <Card className="mb-6">
                   <CardContent className="p-6">
                     <h3 className="text-lg font-semibold mb-4 flex items-center">
                       <Building2 className="h-5 w-5 mr-2" />
                       Account Suggestions
                     </h3>
                     <div className="space-y-3">
                       {partialPrepData.candidates.map((candidate, index) => (
                         <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                           <div>
                             <div className="font-medium">{candidate.company?.name || 'Unknown Company'}</div>
                             <div className="text-sm text-muted-foreground">
                               {candidate.matchDetails} ({candidate.confidence}% confidence)
@@ -555,40 +567,42 @@ export default function CallPrep() {
                 <CrmHistory history={callPrep.crmHistory} />
                 <CompetitiveLandscape landscape={callPrep.competitiveLandscape} />
               </div>
 
               {/* Right Column */}
               <div className="space-y-6">
                 {/* User Notes */}
                 <Card>
                   <CardContent className="p-6">
                     <h3 className="text-lg font-semibold mb-4 flex items-center">
                       <FileText className="h-5 w-5 mr-2" />
                       Your Notes
                     </h3>
                     <Textarea
                       placeholder="Add your notes for this call..."
                       value={notesText}
                       onChange={(e) => setNotesText(e.target.value)}
                       className="min-h-[100px] mb-2"
                       data-testid="textarea-prep-notes-full"
                     />
                     {saveNotesMutation.isPending && (
                       <div className="text-xs text-muted-foreground">Saving...</div>
                     )}
                   </CardContent>
                 </Card>
-                
+
                 <KeyStakeholders contacts={contacts} />
                 <RecentNews news={company?.recentNews || []} />
-                <SuggestedOpportunities 
+                <SuggestedOpportunities
                   immediate={callPrep.immediateOpportunities || []}
                   strategic={callPrep.strategicExpansion || []}
                 />
               </div>
             </div>
           )}
         </div>
       </div>
     </div>
+    <SalesCoachPanel />
+  </SalesCoachProvider>
   );
 }
diff --git a/docs/agent3-live-call-coach-prompt.md b/docs/agent3-live-call-coach-prompt.md
new file mode 100644
index 0000000000000000000000000000000000000000..4547acff2bc093f6a422442581f7ed4b0b43b895
--- /dev/null
+++ b/docs/agent3-live-call-coach-prompt.md
@@ -0,0 +1,54 @@
+# Agent 3 Implementation Brief: Live Sales Call Coach
+
+## Context
+Momentum AI currently delivers AI-powered call preparation with GPT-5 and Model Context Protocol (MCP) integrations. The next milestone is a **Live Sales Call Coach** that reps can launch from any prep sheet. The coach must passively listen to the active browser tab audio (Granola-style recorder), stream audio to the backend for real-time transcription/analysis, and surface coaching insights in a docked panel without joining the meeting.
+
+## Objectives
+1. Provide a "Sales Coach" launcher on every prep sheet (calendar event detail).
+2. Open a docked, resizable coach panel that stays attached to the prep experience.
+3. Capture tab audio only (no microphone/voice injection) and stream it to the backend via WebRTC/WebSocket.
+4. Receive live MCP-backed coaching suggestions, transcripts, and suggested answers to customer questions.
+5. Maintain graceful failure handling (permissions denied, connection dropped, MCP unavailable).
+
+## Deliverables for Agent 3
+- Finish the `sales-coach` front-end module scaffolded in this branch.
+- Wire the UI state machine to the real-time back end (websocket endpoint TBD `/api/coach/live`).
+- Integrate MCP responses (questions, suggestions, knowledge cards) into the panel layout.
+- Persist session metadata and transcripts in the existing TanStack Query cache for rehydration.
+- Ensure TypeScript types cover streaming payloads and UI states.
+- Implement automated tests for reducer/utility logic (Vitest + Testing Library).
+
+## Acceptance Criteria
+- Launch button appears in the prep sheet header and opens/closes the docked coach panel.
+- Starting a session requests `navigator.mediaDevices.getDisplayMedia({ audio: true, video: false })` and streams binary chunks to the back end.
+- Live transcript updates in near real-time (fake data acceptable behind feature flag until backend ready).
+- MCP responses render in dedicated sections (Suggestions, Objections, Knowledge Base).
+- Error toasts are surfaced for permission denial, connection errors, or backend 5xx responses.
+- Panel is responsive (desktop + tablet) and keyboard accessible.
+
+## Prompt for Agent 3
+Use the following prompt inside Replit Agent 3:
+
+```
+You are working on Momentum AI's Live Sales Call Coach. The branch already contains a scaffold for `sales-coach` components and hooks.
+
+Tasks:
+1. Finish the audio capture + streaming pipeline in `client/src/lib/sales-coach/audio-stream.ts` using `navigator.mediaDevices.getDisplayMedia` (audio only) and `MediaRecorder`.
+2. Connect the UI state machine in `client/src/components/sales-coach/sales-coach-provider.tsx` to the backend websocket endpoint `/api/coach/live` and wire reducer actions to socket events.
+3. Flesh out `SalesCoachPanel` to render live transcript, suggestions, objection handling, and MCP-powered knowledge cards. Use the design tokens already present (Tailwind + shadcn/ui).
+4. Implement optimistic UI updates in `useSalesCoachSession` with TanStack Query so transcripts persist when the panel closes/reopens.
+5. Create Vitest unit tests covering the reducer logic (`sales-coach-reducer.test.ts`) and component snapshot test for the panel in idle/loading/active states.
+6. Guard all calls that touch `window`/`navigator` behind runtime checks so SSR/testing works.
+
+Requirements:
+- Maintain TypeScript strictness.
+- Provide comprehensive error handling and user feedback (toasts, inline states).
+- Reuse MCP client utilities from `client/src/lib/mcp-client.ts` for follow-up knowledge lookups.
+- Keep the panel fully accessible (aria labels, keyboard focus trapping via `Sheet`).
+- Update documentation if the public API changes.
+```
+
+## Notes
+- Backend contract is in progress. Use `LiveCoachSocketEvent` types defined in `client/src/lib/sales-coach/events.ts` and stubbed responses if necessary.
+- Coordinate with backend team before committing payload shape changes.
+- Feature flag name: `salesCoach`. Gate all entry points behind this flag until GA.
 
EOF
)